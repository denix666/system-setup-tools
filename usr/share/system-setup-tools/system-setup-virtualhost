#! /bin/bash
#
# Copyright Â© 2001 - 2012 Denis Salmanovich denis.salmanovich@gmail.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#


[ -f /etc/denix-colors ] && . /etc/denix-colors

# Check system version
[ -f /etc/fedora-release ] && system_ver=`cat /etc/fedora-release | head -1 | awk '{print $3}'`
if ! [ $system_ver = "21" -o $system_ver = "19" -o $system_ver = "20" ]; then
    $color_Red
    echo "Not supported platform!"
    echo "Exiting..."
    $color_Off
    exit 1
fi

# Check if script runs under root
if ! [ "$(whoami)" = "root" ]; then
    echo "You have to run me with root user priveleges!"
    exit 1
fi

# Check if named is installed
if ! [ -f /var/lib/system-setup-tools/named ]; then
    $color_Red
    echo "The named server is not installed on your system!"
    $color_Cyan
    echo -n "Do you want to install it now? (Y/n)?"; read USERINPUT
    $color_Off
    if [ "${USERINPUT}" = "" -o "${USERINPUT}" = "y" -o "${USERINPUT}" = "Y" ]; then
	/usr/bin/system-setup-named
    fi
fi

# Check if apache is installed
if ! [ -f /var/lib/system-setup-tools/httpd ]; then
    $color_Red
    echo "The apache server is not installed on your system!"
    $color_Cyan
    echo -n "Do you want to install it now? (Y/n)?"; read USERINPUT
    $color_Off
    if [ "${USERINPUT}" = "" -o "${USERINPUT}" = "y" -o "${USERINPUT}" = "Y" ]; then
	/usr/bin/system-setup-httpd
    fi
fi

# Ask for network device
while [ "${IFACE}" = "" ]; do
    IF_LIST=`ifconfig -a | sed 's/[: \t].*//;/^\(lo\|\)$/d'`
    if [[ -z "${IF_LIST}" ]]; then
	$color_BRed
	echo "No network adapters found."
	echo "Exiting..."
	$color_Off
	exit 1
    fi
    $color_Yellow
    echo
    echo "Found network adapters:"
    echo "~~~~~~~~~~~~~~~~~~~~~~~"
    for i in $IF_LIST; do
	if ! ip addr show ${i} | grep "inet " >/dev/null 2>&1; then
    	    IPADDR="<no address>"
	else
    	    IPADDR=`ifconfig ${i} | head -2 | tail -1 | awk '{print $2}' | cut -d":" -f2`
	fi
	echo "$i - $IPADDR"
    done
    $color_Off
    echo
    FOUND_IFACE=`ifconfig -a | sed 's/[: \t].*//;/^\(lo\|\)$/d' | head -1`
    $color_Cyan
    echo -n "What is your primary network interface [${FOUND_IFACE}]?"; read IFACE
    $color_Off
    if [ "${IFACE}" = "" ]; then
	IFACE="${FOUND_IFACE}"
    fi
    if ! ifconfig ${IFACE} >/dev/null 2>&1; then
	$color_Red
	echo "Error fetching network device: ${IFACE}"
	$color_Off
	IFACE=""
    fi
    if ! ip addr show ${IFACE} | grep "inet " >/dev/null 2>&1; then
	$color_Red
	echo "Error fetching IP address for device: ${IFACE}"
	$color_Off
	IFACE=""
    fi
done
INT_IPADDR=`ifconfig ${IFACE} | head -2 | tail -1 | awk '{print $2}' | cut -d":" -f2`


# Ask for virtual hostname 
DOMAINNAME=`hostname`
while [ "${VIRTUALHOST}" = "" ]; do
    $color_Cyan
    echo -n "Enter name for virtualhost [${DOMAINNAME}]: "; read VIRTUALHOST
    $color_Off
    if [ "${VIRTUALHOST}" = "" ]; then
	VIRTUALHOST="${DOMAINNAME}"
    fi
    if [ -e /var/named/masters/internal/${VIRTUALHOST} ]; then
	$color_Red
	echo "That virtualhost already exists!. Please choose another one!"
	$color_Off
	VIRTUALHOST=""
    fi
done

# Ask for virtual hostname external IP address
VIRTUALHOST_IP=${INT_IPADDR}
while [ "${EXT_IPADDR}" = "" ]; do
    $color_Cyan
    echo -n "Enter external IP address of virtualhost [${VIRTUALHOST_IP}]: "; read EXT_IPADDR
    $color_Off
    if [ "${EXT_IPADDR}" = "" ]; then
	EXT_IPADDR="${VIRTUALHOST_IP}"
    fi
done

# Add virtualhost user
if ! [ `cat /etc/passwd | grep ^${VIRTUALHOST}:` ]; then
    echo
    $color_Green
    echo "Virtualhost user must be created!"
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    echo "You can upload your web content related to this virtualhost by FTP with this user"
    echo "Don't forget to setup the FTP server with <system-setup-proftpd> command!"
    echo
    $color_Yellow
    echo "Creating user <${VIRTUALHOST}>..."
    echo
    useradd -s /sbin/nologin ${VIRTUALHOST}
    chmod 710 /home/${VIRTUALHOST}
    usermod -a -G ${VIRTUALHOST} apache
    $color_Cyan
    echo "Please create the password for user <${VIRTUALHOST}>:"
    passwd ${VIRTUALHOST}
    $color_Off
fi


cat > /var/named/masters/internal/${VIRTUALHOST} << EOF
\$ORIGIN .
\$TTL 300	; 5 minutes
${VIRTUALHOST}		IN SOA	ns.${VIRTUALHOST}. hostmaster.${VIRTUALHOST}. (
				1          ; serial
                                300        ; refresh (5 minutes)
                                300        ; retry (5 minutes)
                                300        ; expire (5 minutes)
                                300        ; minimum (5 minutes)
                                )
                        NS      ns.${VIRTUALHOST}.
                        A       ${INT_IPADDR}
                        MX      10 ${VIRTUALHOST}.
\$ORIGIN ${VIRTUALHOST}.
ns                      A       ${INT_IPADDR}
mail			A	${INT_IPADDR}
www			A	${INT_IPADDR}
EOF
chown named:named /var/named/masters/internal/${VIRTUALHOST}

cat >> /var/named/masters/internal.zones << EOF

zone "${VIRTUALHOST}" IN {
    type master;
    file "masters/internal/${VIRTUALHOST}";
    allow-update { key rndc-key; };
    allow-transfer { none; };
};
EOF

cat > /var/named/masters/external/${VIRTUALHOST} << EOF
\$ORIGIN .
\$TTL 300	; 5 minutes
${VIRTUALHOST}		IN SOA	ns.${VIRTUALHOST}. hostmaster.${VIRTUALHOST}. (
				1          ; serial
                                300        ; refresh (5 minutes)
                                300        ; retry (5 minutes)
                                300        ; expire (5 minutes)
                                300        ; minimum (5 minutes)
                                )
                        NS      ns.${VIRTUALHOST}.
                        A       ${EXT_IPADDR}
                        MX      10 ${VIRTUALHOST}.
\$ORIGIN ${VIRTUALHOST}.
ns                      A       ${EXT_IPADDR}
mail			A	${EXT_IPADDR}
www			A	${EXT_IPADDR}
EOF
chown named:named /var/named/masters/external/${VIRTUALHOST}

cat >> /var/named/masters/external.zones << EOF

zone "${VIRTUALHOST}" IN {
    type master;
    file "masters/external/${VIRTUALHOST}";
    allow-update { key rndc-key; };
    allow-transfer { none; };
};
EOF

# Check, if vhosts file already exists, then backup it
if [ -f /etc/httpd/conf.d/vhosts.conf ]; then
    cp /etc/httpd/conf.d/vhosts.conf /etc/httpd/conf.d/vhosts.conf.back.`date +%Y%m%d%H%M`
fi

# Add virtual host configuration to apache
cat >> /etc/httpd/conf.d/vhosts.conf << EOF

<VirtualHost *:80>
    DocumentRoot /home/${VIRTUALHOST}/.public_html
    ServerPath /.public_html
    ServerName ${VIRTUALHOST}
    ServerAlias ${VIRTUALHOST}
    ServerAlias www.${VIRTUALHOST}
</VirtualHost>
EOF

# Restart services after changes
systemctl reload named >/dev/null 2>&1
systemctl reload httpd >/dev/null 2>&1
