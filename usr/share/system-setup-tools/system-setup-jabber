#! /bin/bash
#
# Copyright Â© 2001 - 2012 Denis Salmanovich denis.salmanovich@gmail.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#

[ -f /etc/denix-colors ] && . /etc/denix-colors

# Check if script runs under root
if ! [ "$(whoami)" = "root" ]; then
    echo "You have to run me with root user priveleges!"
    exit 1
fi

# Check system version
[ -f /etc/fedora-release ] && system_ver=`cat /etc/fedora-release | head -1 | awk '{print $3}'`
if ! [ $system_ver = "18" -o $system_ver = "19" ]; then
    $color_Red
    echo "Not supported platform!"
    echo "Exiting..."
    $color_Off
    exit 1
fi

# Install required packages
pk="ejabberd"
for i in $pk; do
	if ! rpm -q $i >/dev/null 2>&1; then
		required_packages="$required_packages $i"
	fi
done

if ! [ "$required_packages" = "" ]; then
    $color_Purple
    echo "Some packages not found on your system. Trying to download and install..."
    if ! yum -y install $required_packages; then
        $color_BRed
        echo "Download failed! Check internet connection and try again!"
        $color_Off
        exit 1
    else
        $color_Green
        echo "Installation success!"
        $color_Off
    fi
fi

# Check, if ejabberd configuration file already exists, then backup it
if [ -f /etc/ejabberd/ejabberd.cfg ]; then
    cp /etc/ejabberd/ejabberd.cfg /etc/ejabberd/ejabberd.cfg.back.`date +%Y%m%d%H%M`
fi

# Create configuration file
cat /etc/ejabberd/ejabberd.cfg << EOF
override_acls.
{loglevel, 4}.
{hosts, ["$(hostname)"]}.
{route_subdomains, s2s}.
{listen,
 [
  {5222, ejabberd_c2s, [
			{certfile, "/etc/ejabberd/ejabberd.pem"}, starttls,
			{access, c2s},
			{shaper, c2s_shaper},
			{max_stanza_size, 65536}
		       ]},
  {5223, ejabberd_c2s, [
  			{access, c2s},
  			{shaper, c2s_shaper},
  			{certfile, "/etc/ejabberd/ejabberd.pem"}, tls,
  			{max_stanza_size, 65536}
  		       ]},
  {5269, ejabberd_s2s_in, [
			   {shaper, s2s_shaper},
			   {max_stanza_size, 131072}
			  ]},
  {5280, ejabberd_http, [
			 captcha,
			 http_bind,
			 http_poll,
			 web_admin
			]}
 ]}.
{s2s_use_starttls, optional}.
{s2s_certfile, "/etc/ejabberd/ejabberd.pem"}.
{s2s_default_policy, allow}.
{auth_method, internal}.
{shaper, normal, {maxrate, 1000}}.
{shaper, fast, {maxrate, 50000}}.
{max_fsm_queue, 1000}.
{acl, local, {user_regexp, ""}}.
{access, max_user_sessions, [{10, all}]}.
{access, max_user_offline_messages, [{5000, admin}, {100, all}]}.
{access, local, [{allow, local}]}.
{access, c2s, [{deny, blocked}, {allow, all}]}.
{access, c2s_shaper, [{none, admin}, {normal, all}]}.
{access, s2s_shaper, [{fast, all}]}.
{access, announce, [{allow, admin}]}.
{access, configure, [{allow, admin}]}.
{access, muc_admin, [{allow, admin}]}.
{access, muc_create, [{allow, local}]}.
{access, muc, [{allow, all}]}.
{access, pubsub_createnode, [{allow, local}]}.
{access, register, [{allow, deny}]}.
{language, "en"}.
{modules,
 [
  {mod_adhoc,    []},
  {mod_announce, [{access, announce}]}, % recommends mod_adhoc
  {mod_blocking,[]}, % requires mod_privacy
  {mod_caps,     []},
  {mod_configure,[]}, % requires mod_adhoc
  {mod_disco,    []},
  {mod_irc,      []},
  {mod_http_bind, []},
  {mod_last,     []},
  {mod_muc,      [
		  {access, muc},
		  {access_create, muc_create},
		  {access_persistent, muc_create},
		  {access_admin, muc_admin}
		 ]},
  {mod_offline,  [{access_max_user_messages, max_user_offline_messages}]},
  {mod_ping,     []},
  {mod_privacy,  []},
  {mod_private,  []},
  {mod_pubsub,   [
		  {access_createnode, pubsub_createnode},
		  {ignore_pep_from_offline, true}, % reduces resource comsumption, but XEP incompliant
		  {last_item_cache, false},
		  {plugins, ["flat", "hometree", "pep"]}  % pep requires mod_caps
		 ]},
  {mod_register, [
		  {welcome_message, {"Welcome!",
				     "Hi.\nWelcome to DeniX XMPP server."}},
		  {ip_access, [{allow, "127.0.0.0/8"},
			       {deny, "0.0.0.0/0"}]},
		  {access, register}
		 ]},
  {mod_roster,   []},
  {mod_shared_roster,[]},
  {mod_stats,    []},
  {mod_time,     []},
  {mod_vcard,    []},
  {mod_version,  []}
 ]}.
EOF
chown ejabberd:ejabberd /etc/ejabberd/ejabberd.cfg

# Backup old certificate
if [ -f /etc/ejabberd/ejabberd.pem ]; then
    cp /etc/ejabberd/ejabberd.pem /etc/ejabberd/ejabberd.pem.back.`date +%Y%m%d%H%M`
fi

# Generate certificate
openssl req -new -x509 -nodes -newkey rsa:1024 -days 3650 -keyout /tmp/privkey.pem -out /tmp/cert.pem -subj "/C=XX/ST=XX/L=XX/O=XX/OU=XX/CN=$(hostname)/emailAddress="admin@$(hostname)
cat /tmp/privkey.pem > /etc/ejabberd/ejabberd.pem
cat /tmp/cert.pem >> /etc/ejabberd/ejabberd.pem
rm -rf /tmp/{privkey.pem,cert.pem}
chown ejabberd:ejabberd /etc/ejabberd/ejabberd.pem

# Check filewall ports
if ! firewall-cmd --permanent --query-port=5222/tcp; then
    $color_Red
    echo "The XMPP service port (5222/tcp) is closed in your firewall!"
    $color_Cyan
    echo -n "Do you want to open it now? (Y/n)?"; read USERINPUT
    $color_Off
    if [ "${USERINPUT}" = "" -o "${USERINPUT}" = "y" -o "${USERINPUT}" = "Y" ]; then
	firewall-cmd --permanent --add-port=5222/tcp
	firewall-cmd --reload
	$color_BGreen
	echo "The XMPP service port (5222/tcp) was opened in your firewall!!!"
	$color_Off
    else
	$color_BRed
	echo "The XMPP service port (5222/tcp) was not been opened in your firewall!!!"
	$color_Off
    fi
fi

# Enable jabber server daemon
echo "Enabling ejabberd server..."
systemctl enable ejabberd >/dev/null 2>&1

# Start jabber server
echo "Starting ejabberd server..."
systemctl start ejabberd >/dev/null 2>&1

# Create installation signature
if ! [ -d /var/lib/system-setup-tools ]; then
	install -d /var/lib/system-setup-tools
fi
echo "Install date: `date`" > /var/lib/system-setup-tools/jabber

$color_BGreen
echo "Setup completed!"
$color_Off
